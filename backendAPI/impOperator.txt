Comparison Operators
$eq (Equal): Matches values that are equal to the specified value.

js
Copy code
db.users.find({ age: { $eq: 25 } })  // Find users where age is 25
$gt (Greater Than): Matches values that are greater than the specified value.

js
Copy code
db.users.find({ age: { $gt: 25 } })  // Find users older than 25
$gte (Greater Than or Equal): Matches values that are greater than or equal to the specified value.

js
Copy code
db.users.find({ age: { $gte: 25 } })  // Find users who are 25 or older
$lt (Less Than): Matches values that are less than the specified value.

js
Copy code
db.users.find({ age: { $lt: 25 } })  // Find users younger than 25
$lte (Less Than or Equal): Matches values that are less than or equal to the specified value.

js
Copy code
db.users.find({ age: { $lte: 25 } })  // Find users who are 25 or younger
$ne (Not Equal): Matches values that are not equal to the specified value.

js
Copy code
db.users.find({ age: { $ne: 25 } })  // Find users whose age is not 25

************************************** Comparison operator

***********************************
 Logical Operators
$and: Matches documents where all the conditions are true.

js
Copy code
db.users.find({
  $and: [{ age: { $gt: 20 } }, { age: { $lt: 30 } }]
})  // Find users whose age is between 20 and 30
$or: Matches documents where at least one condition is true.

js
Copy code
db.users.find({
  $or: [{ age: { $gt: 25 } }, { name: "John" }]
})  // Find users who are either older than 25 or named John
$nor: Matches documents where none of the conditions are true.

js
Copy code
db.users.find({
  $nor: [{ age: { $gt: 25 } }, { name: "John" }]
})  // Find users who are neither older than 25 nor named John
$not: Inverts the effect of a query operator.

js
Copy code
db.users.find({ age: { $not: { $gt: 25 } } })  // Find use

***************************************************

 Array Operators
These help when working with arrays (lists of values).

$in

Matches documents where the field’s value is in a list of values.
js
Copy code
db.users.find({ age: { $in: [20, 25, 30] } })  // Find users whose age is 20, 25, or 30
$nin

Matches documents where the field’s value is NOT in a list of values.
js
Copy code
db.users.find({ age: { $nin: [20, 25, 30] } })  // Find users whose age is NOT 20, 25, or 30
$all

Matches arrays that contain all specified elements.
js
Copy code
db.users.find({ tags: { $all: ["new", "sale"] } })  // Find users whose tags array has "new" and "sale"
$size

Matches arrays with a specified number of elements.
js
Copy code
db.users.find({ tags: { $size: 3 } })  // Find users whose tags array has exactly 3 elements

***************************************************************

Update Operators
These help you modify documents.

$set

Sets the value of a field.
js
Copy code
db.users.updateOne({ name: "John" }, { $set: { age: 26 } })  // Set John's age to 26
$unset

Removes a field from a document.
js
Copy code
db.users.updateOne({ name: "John" }, { $unset: { age: "" } })  // Remove John's age field
$inc

Increases or decreases the value of a field.
js
Copy code
db.users.updateOne({ name: "John" }, { $inc: { age: 1 } })  // Increase John's age by 1
$push

Adds a value to an array.
js
Copy code
db.users.updateOne({ name: "John" }, { $push: { tags: "newUser" } })  // Add "newUser" to John's tags array
$pull

Removes a value from an array.
js
Copy code
db.users.updateOne({ name: "John" }, { $pull: { tags: "oldUser" } })  // Remove "oldUser" from John's tags array

*************************************

7. Text Search Operator
$text
Searches for documents that contain specific words in text-indexed fields.
js
Copy code
db.articles.find({ $text: { $search: "MongoDB" } })  // Find articles containing the word "MongoDB"

********************************